import pandas as pd
import numpy as np

import requests
import io

labels = np.array(['brainstem glioma', 'pilocytic astrocytoma', 'Glioblastoma (GBM)',
                   'ganglioglioma',
                   'Dysplastic cerebellar gangliocytoma (Lhermitte-Duclos disease (LDD)',
                   'atypical  teratoid-rhabdoid tumor', 'teratoma', 'abscess',
                   'tubercloma ',
                   'Focal areas of signal intensity (unidentified bright objects)',
                   'anaplastic astrocytoma ', 'gliomatosis cerebri ',
                   'oligodendroglioma ', 'Hemangioblastoma', 'Lymphoma ',
                   'radiation necrosis (if there is a history of radiotherapy)',
                   'cavernoma (or cavernoma complicated with hemorrhage)',
                   'solitary Metastasis', 'cerebellar liponeurocytoma',
                   'pontine hemorrhage', 'hemorrhage (hematoma)',
                   'Rosette-Forming Glioneuronal Tumor', 'medulloblastoma (lateral)',
                   'toxoplasmosis', 'Metastasis', 'kaposi sarcoma',
                   'NCC (neurocysticercosis)'], dtype=object)


all_features = np.array(['Child', 'Adult', 'solitary', 'multiple', 'solid_with_necrosis',
                         'solid_cystic', 'cystic', 'caseating', 'serpentine', 'whole_lesion_enhace', 'Enhanced_wall', 'hemorrhage',
                         'Popcorn', 'Calcification', 'fat', 'Diffusion_solid', 'Diffusion_cavity',
                         'wm_edema', 'bg_involv', 'peripheral', 'brainstem', 'striated'], dtype=object)

prevalence = np.array([0.5904059, 0.66420664, 0.5904059, 0.29520295, 0.29520295,
                       0.25830258, 0.29520295, 0.29520295, 0.29520295, 0.29520295,
                       0.22140221, 0.22140221, 0.22140221, 0.5904059, 0.51660517,
                       0.22140221, 0.5904059, 0.5904059, 0.29520295, 0.22140221,
                       0.22140221, 0.29520295, 0.5904059, 0.29520295, 0.51660517,
                       0.22140221, 0.29520295])

positive = np.array([[0.9   , 0.81  , 0.11  , 0.96  , 0.51  , 0.96  , 0.96  , 0.36  ,
        0.41  , 0.96  , 0.0125, 0.085 , 0.16  , 0.16  , 0.26  , 0.11  ,
        0.16  , 0.16  , 0.16  , 0.01  , 0.085 , 0.01  , 0.36  , 0.26  ,
        0.16  , 0.085 , 0.2   ],
       [0.25  , 0.31  , 0.96  , 0.06  , 0.66  , 0.085 , 0.085 , 0.76  ,
        0.71  , 0.085 , 1.01  , 0.91  , 0.86  , 0.91  , 0.86  , 0.86  ,
        0.91  , 0.96  , 0.91  , 1.01  , 1.01  , 1.01  , 0.76  , 0.86  ,
        0.96  , 0.96  , 0.9   ],
       [1.01  , 1.01  , 0.96  , 1.01  , 1.01  , 1.01  , 1.01  , 0.96  ,
        0.76  , 0.06  , 1.01  , 0.96  , 0.86  , 0.96  , 0.66  , 0.96  ,
        0.96  , 1.01  , 1.01  , 1.01  , 1.01  , 1.01  , 1.01  , 0.11  ,
        0.01  , 0.06  , 0.025 ],
       [0.095 , 0.06  , 0.21  , 0.06  , 0.085 , 0.035 , 0.01  , 0.16  ,
        0.66  , 0.96  , 0.01  , 0.085 , 0.11  , 0.11  , 0.46  , 0.16  ,
        0.085 , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.91  ,
        1.01  , 0.96  , 0.975 ],
       [0.925 , 0.21  , 0.11  , 0.76  , 1.01  , 0.11  , 0.11  , 0.01  ,
        0.46  , 1.01  , 1.    , 1.01  , 0.01  , 0.085 , 0.76  , 0.26  ,
        1.01  , 0.36  , 0.66  , 0.96  , 0.86  , 0.46  , 0.46  , 0.01  ,
        0.36  , 0.96  , 0.01  ],
       [0.25  , 0.81  , 0.96  , 0.51  , 0.01  , 0.91  , 0.96  , 0.01  ,
        0.76  , 0.11  , 0.035 , 0.06  , 0.76  , 1.01  , 0.36  , 0.91  ,
        0.08  , 0.76  , 0.86  , 0.16  , 0.41  , 0.41  , 0.81  , 0.16  ,
        0.76  , 0.66  , 0.075 ],
       [0.01  , 0.11  , 0.085 , 0.01  , 0.01  , 0.01  , 0.06  , 1.01  ,
        0.66  , 0.01  , 0.01  , 0.01  , 0.085 , 0.31  , 0.01  , 0.11  ,
        0.01  , 0.16  , 0.01  , 0.31  , 0.1   , 0.31  , 0.01  , 0.96  ,
        0.16  , 0.01  , 0.95  ],
       [0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.11  ,
        0.96  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.06  , 0.01  ,
        0.01  , 0.01  , 0.01  , 0.085 , 0.01  , 0.01  , 0.01  , 0.085 ,
        0.01  , 0.01  , 0.025 ],
       [0.0125, 0.0125, 0.0125, 0.01  , 0.01  , 0.015 , 0.035 , 0.01  ,
        0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.86  , 0.01  , 0.01  ,
        0.06  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  ,
        0.01  , 0.01  , 0.01  ],
       [0.41  , 0.91  , 0.96  , 0.56  , 0.085 , 1.01  , 0.96  , 0.01  ,
        0.86  , 0.01  , 0.86  , 0.06  , 0.91  , 1.01  , 1.01  , 0.96  ,
        0.15  , 0.91  , 0.76  , 0.01  , 0.085 , 0.56  , 0.91  , 0.11  ,
        0.91  , 0.96  , 0.25  ],
       [0.01  , 0.51  , 0.085 , 0.41  , 0.01  , 0.01  , 0.06  , 1.01  ,
        0.86  , 0.01  , 0.01  , 0.01  , 0.01  , 0.36  , 0.01  , 1.01  ,
        0.15  , 0.16  , 0.01  , 0.16  , 0.1   , 0.36  , 0.21  , 0.96  ,
        0.16  , 0.01  , 0.95  ],
       [0.11  , 0.06  , 0.06  , 0.01  , 0.01  , 0.16  , 0.085 , 0.085 ,
        0.11  , 0.01  , 0.085 , 0.01  , 0.11  , 0.21  , 0.085 , 0.06  ,
        0.935 , 0.21  , 0.01  , 1.01  , 0.975 , 0.16  , 0.11  , 0.06  ,
        0.21  , 0.46  , 0.01  ],
       [0.01  , 0.011 , 0.015 , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  ,
        0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  ,
        0.96  , 0.01  , 0.01  , 0.11  , 0.025 , 0.01  , 0.01  , 0.01  ,
        0.01  , 0.01  , 0.01  ],
       [0.085 , 0.26  , 0.11  , 0.41  , 0.16  , 0.56  , 0.66  , 0.01  ,
        0.46  , 0.01  , 0.11  , 0.01  , 0.76  , 0.03  , 0.21  , 0.035 ,
        0.11  , 0.085 , 0.01  , 0.01  , 0.05  , 0.31  , 0.71  , 0.015 ,
        0.085 , 0.01  , 0.25  ],
       [0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.56  , 0.01  ,
        0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.0125, 0.01  ,
        0.01  , 0.01  , 1.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  ,
        0.01  , 0.01  , 0.01  ],
       [0.06  , 0.06  , 0.11  , 0.01  , 0.01  , 0.16  , 0.11  , 0.035 ,
        0.76  , 0.0125, 0.085 , 0.01  , 0.085 , 0.085 , 0.96  , 0.01  ,
        0.31  , 0.085 , 0.01  , 0.36  , 0.25  , 1.01  , 1.01  , 0.035 ,
        0.085 , 0.31  , 0.35  ],
       [0.06  , 0.03  , 0.11  , 0.01  , 0.01  , 0.01  , 0.01  , 1.01  ,
        0.76  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  ,
        0.01  , 0.01  , 0.01  , 0.01  , 0.1   , 0.01  , 0.01  , 0.86  ,
        0.01  , 0.11  , 0.05  ],
       [0.11  , 0.085 , 0.76  , 0.085 , 0.11  , 0.76  , 0.76  , 1.01  ,
        0.36  , 0.015 , 0.41  , 0.86  , 0.46  , 0.36  , 0.66  , 0.66  ,
        0.11  , 0.91  , 0.16  , 0.01  , 0.45  , 0.01  , 0.76  , 1.01  ,
        0.91  , 0.11  , 0.25  ],
       [0.11  , 0.26  , 0.26  , 0.085 , 0.01  , 0.36  , 0.085 , 0.085 ,
        0.71  , 0.96  , 0.36  , 0.01  , 0.035 , 0.01  , 0.31  , 0.085 ,
        0.085 , 0.36  , 0.01  , 0.01  , 0.4   , 0.01  , 0.01  , 0.86  ,
        0.36  , 0.36  , 0.08  ],
       [0.06  , 0.56  , 0.56  , 0.96  , 0.96  , 0.425 , 0.035 , 0.96  ,
        0.66  , 0.01  , 0.46  , 0.91  , 0.96  , 0.96  , 0.31  , 0.085 ,
        0.15  , 0.66  , 0.91  , 0.01  , 0.65  , 0.01  , 1.01  , 0.16  ,
        0.66  , 0.66  , 0.65  ],
       [1.01  , 0.46  , 0.46  , 0.085 , 0.01  , 0.25  , 0.085 , 0.085 ,
        0.56  , 0.76  , 0.11  , 0.01  , 0.01  , 0.01  , 0.085 , 0.085 ,
        0.41  , 0.36  , 0.01  , 1.01  , 0.01  , 0.01  , 0.01  , 0.06  ,
        0.36  , 0.36  , 0.3   ],
       [0.01  , 0.01  , 0.01  , 0.01  , 1.01  , 0.01  , 0.01  , 0.01  ,
        0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  ,
        0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  ,
        0.01  , 0.01  , 0.01  ]])

negative = np.array([[0.86865334, 0.88917626, 0.98494986, 0.86865334, 0.93022209,
        0.86865334, 0.86865334, 0.950745  , 0.94390403, 0.86865334,
        0.99828976, 0.98837035, 0.97810889, 0.97810889, 0.96442695,
        0.98494986, 0.97810889, 0.97810889, 0.97810889, 0.99863181,
        0.99863181, 0.99863181, 0.950745  , 0.96442695, 0.97810889,
        0.98837035, 0.97263611],
       [0.99290853, 0.98626027, 0.95745116, 0.9973407 , 0.97074767,
        0.99623265, 0.99623265, 0.9663155 , 0.96853159, 0.99623265,
        0.95523507, 0.95966724, 0.96188333, 0.95966724, 0.96188333,
        0.96188333, 0.95966724, 0.95745116, 0.95966724, 0.95523507,
        0.95523507, 0.95523507, 0.9663155 , 0.96188333, 0.95745116,
        0.95745116, 0.96011046],
       [0.94990543, 0.94990543, 0.95238536, 0.94990543, 0.94990543,
        0.94990543, 0.94990543, 0.95238536, 0.96230507, 0.99702408,
        0.94990543, 0.95238536, 0.95734522, 0.95238536, 0.96726493,
        0.95238536, 0.95238536, 0.94990543, 0.94990543, 0.94990543,
        0.94990543, 0.94990543, 0.94990543, 0.99454416, 0.99950401,
        0.99702408, 0.99876004],
       [0.97418248, 0.98591771, 0.950712  , 0.98591771, 0.9800501 ,
        0.99178533, 0.99765295, 0.96244724, 0.84509486, 0.77468344,
        0.99765295, 0.9800501 , 0.97418248, 0.97418248, 0.89203581,
        0.96244724, 0.9800501 , 0.99765295, 0.99765295, 0.99765295,
        0.99765295, 0.99765295, 0.99765295, 0.78641867, 0.7629482 ,
        0.77468344, 0.77116287],
       [0.90234537, 0.97863805, 0.98881041, 0.92269009, 0.8972592 ,
        0.98881041, 0.98881041, 0.99898276, 0.95320716, 0.8972592 ,
        0.89827643, 0.8972592 , 0.99898276, 0.9913535 , 0.92269009,
        0.97355187, 0.8972592 , 0.96337952, 0.93286244, 0.90234537,
        0.91251773, 0.95320716, 0.95320716, 0.99898276, 0.96337952,
        0.90234537, 0.99898276],
       [0.99149856, 0.91898632, 0.90398379, 0.94899139, 0.99899983,
        0.90898463, 0.90398379, 0.99899983, 0.92398717, 0.98899814,
        0.99649941, 0.99399899, 0.92398717, 0.89898294, 0.96399392,
        0.90898463, 0.99649941, 0.92398717, 0.91398548, 0.9839973 ,
        0.95899308, 0.95899308, 0.91898632, 0.9839973 , 0.92398717,
        0.93398886, 0.99249873],
       [0.99730199, 0.97032192, 0.97706694, 0.99730199, 0.99730199,
        0.99730199, 0.98381196, 0.72750129, 0.82193154, 0.99730199,
        0.99730199, 0.99730199, 0.97706694, 0.91636178, 0.99730199,
        0.97032192, 0.99730199, 0.95683189, 0.99730199, 0.91636178,
        0.97301993, 0.91636178, 0.99730199, 0.73694431, 0.95683189,
        0.99730199, 0.73694431],
       [0.99511492, 0.99511492, 0.99511492, 0.99511492, 0.99511492,
        0.99511492, 0.99511492, 0.94626408, 0.53103198, 0.99511492,
        0.99511492, 0.99511492, 0.99511492, 0.99511492, 0.9706895 ,
        0.99511492, 0.99511492, 0.99511492, 0.99511492, 0.95847679,
        0.99511492, 0.99511492, 0.99511492, 0.95847679, 0.99511492,
        0.99511492, 0.98778729],
       [0.99312993, 0.99312993, 0.99312993, 0.99450395, 0.99450395,
        0.99175592, 0.98076381, 0.99450395, 0.99450395, 0.99450395,
        0.99450395, 0.99450395, 0.99450395, 0.5273393 , 0.99450395,
        0.99450395, 0.96702367, 0.99450395, 0.99450395, 0.99450395,
        0.99450395, 0.99450395, 0.99450395, 0.99450395, 0.99450395,
        0.99450395, 0.99450395],
       [0.96176121, 0.91512853, 0.85      , 0.94777141, 0.99207245,
        0.905802  , 0.91046527, 0.99906735, 0.9197918 , 0.99906735,
        0.9197918 , 0.99440408, 0.91512853, 0.905802  , 0.905802  ,
        0.91046527, 0.99906735, 0.91512853, 0.92911834, 0.99906735,
        0.99207245, 0.94777141, 0.91512853, 0.98974081, 0.91512853,
        0.91046527, 0.97668366],
       [0.99771406, 0.88341727, 0.98056954, 0.90627663, 0.99771406,
        0.99771406, 0.98628438, 0.76912047, 0.80340951, 0.99771406,
        0.99771406, 0.99771406, 0.99771406, 0.91770631, 0.99771406,
        0.76912047, 0.99771406, 0.96342503, 0.99771406, 0.96342503,
        0.97714064, 0.91770631, 0.95199535, 0.78055015, 0.96342503,
        0.99771406, 0.78283609],
       [0.97534116, 0.98654972, 0.98654972, 0.99775829, 0.99775829,
        0.96413259, 0.98094544, 0.98094544, 0.97534116, 0.99775829,
        0.98094544, 0.99775829, 0.97534116, 0.95292402, 0.98094544,
        0.98654972, 0.78479554, 0.95292402, 0.99775829, 0.77358698,
        0.78143297, 0.96413259, 0.97534116, 0.98654972, 0.95292402,
        0.8968812 , 1.        ],
       [0.99443878, 0.99388265, 0.99165816, 0.99443878, 0.99443878,
        0.99443878, 0.99443878, 0.99443878, 0.99443878, 0.99443878,
        0.99443878, 0.99443878, 0.99443878, 0.99443878, 0.99443878,
        0.99443878, 0.52173468, 0.99443878, 0.99443878, 0.93882653,
        0.98609694, 0.99443878, 0.99443878, 0.99443878, 0.99443878,
        0.99443878, 1.        ],
       [0.98487389, 0.95373189, 0.98042503, 0.92703876, 0.97152732,
        0.90034562, 0.88255019, 0.99822046, 0.91814104, 0.99822046,
        0.98042503, 0.99822046, 0.86475477, 0.99466137, 0.96262961,
        0.9937716 , 0.98042503, 0.98487389, 0.99822046, 0.99822046,
        0.99110229, 0.94483418, 0.87365248, 0.99733069, 0.98487389,
        0.99822046, 0.95551144],
       [0.99419763, 0.99419763, 0.99419763, 0.99419763, 0.99419763,
        0.99419763, 0.67506722, 0.99419763, 0.99419763, 0.99419763,
        0.99419763, 0.99419763, 0.99419763, 0.99419763, 0.99274704,
        0.99419763, 0.99419763, 0.99419763, 0.41396052, 0.99419763,
        0.99419763, 0.99419763, 0.99419763, 0.99419763, 0.99419763,
        0.99419763, 1.        ],
       [0.98720902, 0.98720902, 0.97654987, 0.99786817, 0.99786817,
        0.96589071, 0.97654987, 0.99253859, 0.83798089, 0.99733521,
        0.98187944, 0.99786817, 0.98187944, 0.98187944, 0.79534428,
        0.99786817, 0.93391326, 0.98187944, 0.99786817, 0.9232541 ,
        0.94670424, 0.78468513, 0.78468513, 0.99253859, 0.98187944,
        0.93391326, 0.92538594],
       [0.97436516, 0.98718258, 0.95300279, 0.99572753, 0.99572753,
        0.99572753, 0.99572753, 0.56848014, 0.67529198, 0.99572753,
        0.99572753, 0.99572753, 0.99572753, 0.99572753, 0.99572753,
        0.99572753, 0.99572753, 0.99572753, 0.99572753, 0.99572753,
        0.95727526, 0.99572753, 0.99572753, 0.63256724, 0.99572753,
        0.95300279, 0.97863763],
       [0.98893629, 0.99145077, 0.9235598 , 0.99145077, 0.98893629,
        0.9235598 , 0.9235598 , 0.898415  , 0.96379148, 0.99849131,
        0.95876252, 0.91350188, 0.95373356, 0.96379148, 0.93361772,
        0.93361772, 0.98893629, 0.90847292, 0.98390733, 0.99899421,
        0.95473935, 0.99899421, 0.9235598 , 0.898415  , 0.90847292,
        0.98893629, 0.9748552 ],
       [0.98116966, 0.95549193, 0.95549193, 0.98544929, 0.99828815,
        0.93837345, 0.98544929, 0.98544929, 0.87845874, 0.83566252,
        0.93837345, 0.99828815, 0.99400853, 0.99828815, 0.94693269,
        0.98544929, 0.98544929, 0.93837345, 0.99828815, 0.99828815,
        0.93152605, 0.99828815, 0.99828815, 0.85278101, 0.93837345,
        0.93837345, 0.98630521],
       [0.99468827, 0.95042387, 0.95042387, 0.91501234, 0.91501234,
        0.96237526, 0.99690149, 0.91501234, 0.94157099, 0.99911471,
        0.95927675, 0.91943878, 0.91501234, 0.91501234, 0.97255607,
        0.99247505, 0.99247505, 0.94157099, 0.91943878, 0.99911471,
        0.94245627, 0.99911471, 0.9105859 , 0.98583539, 0.94157099,
        0.94157099, 0.94245627],
       [0.81522498, 0.91584504, 0.91584504, 0.98444963, 0.99817054,
        0.95426361, 0.98444963, 0.98444963, 0.89755049, 0.86096137,
        0.97987599, 0.99817054, 0.99817054, 0.99817054, 0.98444963,
        0.98444963, 0.92499232, 0.9341396 , 0.99817054, 0.81522498,
        0.99817054, 0.99817054, 0.99817054, 0.98902327, 0.9341396 ,
        0.9341396 , 0.94511633],
       [0.99356325, 0.99356325, 0.99356325, 0.99356325, 0.34988861,
        0.99356325, 0.99356325, 0.99356325, 0.99356325, 0.99356325,
        0.99356325, 0.99356325, 0.99356325, 0.99356325, 0.99356325,
        0.99356325, 0.99356325, 0.99356325, 0.99356325, 0.99356325,
        0.99356325, 0.99356325, 0.99356325, 0.99356325, 0.99356325,
        0.99356325, 0.99356325]])


def infra_intra_axial_calculator(user_input, positive, negative, all_features, labels, prevalence):
    postive_list = [1 if item in user_input else 0 for item in all_features]
    postive_array = np.array(postive_list).reshape(
        22, 1)  # change the number g=here
    neg_array = 1 - postive_array

    pos_multi = np.multiply(positive, postive_array)
    neg_multi = np.multiply(negative, neg_array)

    total_sum = pos_multi + neg_multi

    row_wise_sum = np.prod(total_sum, axis=0)

    pre_normalize = np.multiply(row_wise_sum, prevalence)
    normalized = pre_normalize/pre_normalize.sum()

    list1, list2 = (list(t) for t in zip(*sorted(zip(normalized, labels))))

    result = {}
    for i in range(5):
        result[str(list2[::-1][i])] = round(list1[::-1][i], 5)

    return result
