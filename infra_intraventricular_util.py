import numpy as np

labels = np.array(['ependymoma ', 'subependymoma ', 'Choroid plexus papilloma ',
       'choroid plexus carcinoma', 'medulloblastoma',
       'pilocytic astrocytoma', 'intraventricular meningioma',
       'intraventricular epidermoid cyst', 'metastasis', 'lymphoma',
       'dermoid cyst', 'Racemose neurocysticercosis (NCC)',
       'Rosette-Forming Glioneuronal Tumor',
       'choroid plexus xanthogranuloma',
       'intraventricular arachnoid cyst', 'teratoma'], dtype=object)

all_features = np.array(['Child', 'Adult', '4thVentricle', 'vermis', 'Solid', 
                         'solid_with_cystic', 'pure_cystic', 'fronds', 'foramen', 
                         'Enhancement', 'Hemorrhage', 'Calcifications', 'fat', 
                         'Diffusion', 'wmedema'], dtype=object)

prevalence = np.array([0.11374408, 0.06635071, 0.08530806, 0.05687204, 0.12322275,
       0.11374408, 0.04739336, 0.06635071, 0.05687204, 0.05687204,
       0.03317536, 0.03791469, 0.03317536, 0.03317536, 0.03791469,
       0.03791469])

positive = np.array([[0.96 , 0.21 , 1.01 , 1.01 , 0.96 , 0.86 , 0.085, 0.16 , 0.085,
        0.085, 0.26 , 0.16 , 0.085, 0.46 , 0.16 , 0.96 ],
       [0.16 , 0.86 , 0.01 , 0.01 , 0.11 , 0.36 , 0.96 , 0.86 , 0.96 ,
        0.96 , 0.76 , 0.86 , 0.96 , 0.56 , 0.81 , 0.085],
       [0.985, 0.96 , 1.01 , 1.01 , 0.91 , 0.51 , 0.46 , 0.51 , 0.46 ,
        0.26 , 0.31 , 0.31 , 1.01 , 0.26 , 0.36 , 0.31 ],
       [0.01 , 0.01 , 0.01 , 0.01 , 0.81 , 0.61 , 0.01 , 0.01 , 0.16 ,
        0.11 , 0.085, 0.085, 0.11 , 0.01 , 0.01 , 0.085],
       [0.96 , 0.96 , 0.96 , 0.81 , 0.71 , 0.21 , 0.91 , 0.01 , 0.61 ,
        0.96 , 0.01 , 0.01 , 0.46 , 0.46 , 0.01 , 0.16 ],
       [0.91 , 0.51 , 0.26 , 0.46 , 0.56 , 0.76 , 0.16 , 0.085, 0.76 ,
        0.36 , 0.11 , 0.01 , 0.46 , 0.01 , 0.01 , 0.86 ],
       [0.01 , 0.01 , 0.01 , 0.01 , 0.01 , 0.26 , 0.01 , 1.01 , 0.085,
        0.01 , 0.96 , 1.01 , 0.36 , 0.11 , 1.01 , 0.11 ],
       [0.085, 0.085, 1.01 , 1.01 , 0.085, 0.085, 0.085, 0.085, 0.085,
        0.085, 0.035, 0.085, 0.085, 0.01 , 0.01 , 0.085],
       [0.66 , 0.41 , 0.06 , 0.06 , 0.06 , 0.06 , 0.01 , 0.06 , 0.085,
        0.085, 0.085, 0.085, 0.01 , 0.01 , 0.01 , 0.035],
       [1.01 , 0.11 , 1.01 , 1.01 , 1.01 , 1.01 , 1.01 , 0.06 , 1.01 ,
        1.01 , 0.085, 0.66 , 0.86 , 0.46 , 0.01 , 0.96 ],
       [0.36 , 0.01 , 0.085, 0.085, 0.26 , 0.16 , 0.085, 0.06 , 0.11 ,
        0.085, 0.06 , 0.06 , 0.26 , 0.01 , 0.035, 0.21 ],
       [0.66 , 0.61 , 0.085, 0.085, 0.36 , 0.11 , 0.26 , 0.06 , 0.085,
        0.11 , 0.56 , 0.01 , 0.31 , 0.085, 0.01 , 0.36 ],
       [0.01 , 0.01 , 0.01 , 0.01 , 0.01 , 0.01 , 0.01 , 0.01 , 0.01 ,
        0.01 , 0.96 , 0.01 , 0.01 , 0.01 , 0.01 , 0.46 ],
       [0.26 , 0.01 , 0.01 , 0.085, 0.96 , 0.085, 0.085, 0.985, 0.16 ,
        0.96 , 0.085, 0.01 , 0.06 , 0.86 , 0.015, 0.16 ],
       [0.26 , 0.06 , 0.01 , 0.86 , 0.26 , 0.26 , 0.085, 0.015, 0.36 ,
        0.56 , 0.01 , 0.06 , 0.085, 0.01 , 0.01 , 0.66 ]])

negative = np.array([[0.87552553, 0.97277121, 0.86904249, 0.86904249, 0.87552553,
        0.88849162, 0.98897882, 0.97925426, 0.98897882, 0.98897882,
        0.96628816, 0.97925426, 0.98897882, 0.94035598, 0.97925426,
        0.87552553],
       [0.98385824, 0.91323801, 0.99899114, 0.99899114, 0.98890254,
        0.96368103, 0.90314941, 0.91323801, 0.90314941, 0.90314941,
        0.92332662, 0.91323801, 0.90314941, 0.94350382, 0.91828232,
        0.99142469],
       [0.95508939, 0.95622926, 0.95394953, 0.95394953, 0.95850898,
        0.97674679, 0.97902652, 0.97674679, 0.97902652, 0.98814542,
        0.9858657 , 0.9858657 , 0.95394953, 0.98814542, 0.98358597,
        0.9858657 ],
       [0.99653345, 0.99653345, 0.99653345, 0.99653345, 0.71920947,
        0.78854046, 0.99653345, 0.99653345, 0.9445352 , 0.96186795,
        0.97053433, 0.97053433, 0.96186795, 0.99653345, 0.99653345,
        0.97053433],
       [0.87347257, 0.87347257, 0.87347257, 0.89324248, 0.90642242,
        0.97232212, 0.88006254, 0.99868201, 0.91960236, 0.87347257,
        0.99868201, 0.99868201, 0.93937227, 0.93937227, 0.99868201,
        0.9789121 ],
       [0.88220478, 0.9339829 , 0.96634422, 0.94045516, 0.92751063,
        0.90162158, 0.97928875, 0.98899715, 0.90162158, 0.95339969,
        0.98576102, 0.99870555, 0.94045516, 0.99870555, 0.99870555,
        0.88867705],
       [0.9970564 , 0.9970564 , 0.9970564 , 0.9970564 , 0.9970564 ,
        0.92346629, 0.9970564 , 0.70269599, 0.97497937, 0.9970564 ,
        0.71741401, 0.70269599, 0.89403025, 0.96762036, 0.70269599,
        0.96762036],
       [0.97418762, 0.97418762, 0.69328818, 0.69328818, 0.97418762,
        0.97418762, 0.97418762, 0.97418762, 0.97418762, 0.97418762,
        0.98937137, 0.97418762, 0.97418762, 0.99696325, 0.99696325,
        0.97418762],
       [0.82780207, 0.89302856, 0.98434564, 0.98434564, 0.98434564,
        0.98434564, 0.99739094, 0.98434564, 0.97782299, 0.97782299,
        0.97782299, 0.97782299, 0.99739094, 0.99739094, 0.99739094,
        0.99086829],
       [0.91761435, 0.99102731, 0.91761435, 0.91761435, 0.91761435,
        0.91761435, 0.91761435, 0.9951058 , 0.91761435, 0.91761435,
        0.99306655, 0.94616383, 0.92984984, 0.96247782, 0.9991843 ,
        0.92169284],
       [0.95963304, 0.9988787 , 0.99046891, 0.99046891, 0.97084608,
        0.98205913, 0.99046891, 0.99327217, 0.98766565, 0.99046891,
        0.99327217, 0.99327217, 0.97084608, 0.9988787 , 0.99607543,
        0.97645261],
       [0.90434028, 0.91158723, 0.98768019, 0.98768019, 0.94782197,
        0.98405671, 0.96231587, 0.99130366, 0.98768019, 0.98405671,
        0.91883417, 0.99855061, 0.95506892, 0.98768019, 0.99855061,
        0.94782197],
       [0.99401114, 0.99401114, 0.99401114, 0.99401114, 0.99401114,
        0.99401114, 0.99401114, 0.99401114, 0.99401114, 0.99401114,
        0.42506952, 0.99401114, 0.99401114, 0.99401114, 0.99401114,
        0.72451248],
       [0.93325958, 0.99743306, 0.99743306, 0.97818102, 0.75357384,
        0.97818102, 0.97818102, 0.74715649, 0.95892897, 0.75357384,
        0.97818102, 0.99743306, 0.98459836, 0.77924323, 0.99614959,
        0.95892897],
       [0.94209388, 0.98663705, 0.99777284, 0.80846437, 0.94209388,
        0.94209388, 0.98106915, 0.99665926, 0.91982229, 0.87527912,
        0.99777284, 0.98663705, 0.98106915, 0.99777284, 0.99777284,
        0.85300754]])


def infra_intraventricular_calculator(user_input, positive, negative, all_features, labels, prevalence):
  postive_list = [1 if item in user_input else 0 for item in all_features]
  postive_array = np.array(postive_list).reshape(15,1)  #change the number g=here
  neg_array = 1- postive_array
  
  pos_multi = np.multiply(positive,postive_array)
  neg_multi = np.multiply(negative,neg_array)
  
  total_sum = pos_multi + neg_multi
  
  row_wise_sum = np.prod(total_sum, axis=0)
  
  pre_normalize = np.multiply(row_wise_sum, prevalence)
  normalized = pre_normalize/pre_normalize.sum()
  
  list1, list2 = (list(t) for t in zip(*sorted(zip(normalized, labels))))
  
  result = {}
  for i in range(5):
    result[str(list2[::-1][i])] = round(list1[::-1][i],5)
  
  return result
